TESTES

- Unitários
    - testar pequenas partes do codigo
        - Medotos, classes ...

- Integração
    - testar a requição completa. Fluxo:
    -> Routas -> Controller -> Service -> Repository;
    <- Repository <- Service <- Controller;

 --------------------------------------------------------- 

 FUNÇÕES:
 DESCRIBE -> declara o bloco de testes - tests swites
 IR or TEST -> declara um unico teste unitario - tests cases
 EXPECT -> asserções do resultado - validar resultado

 --------------------------------------------------------- 

 EXEMPLO: 

 function sum(a, b) {
     return a + b
 }

 nome + CallBack
 describe('Initial Tests', () => {
     it("Fisrt unique test", () => {
         const fisrtArgument = 7;
         const secondArgument = 1;

         let result = sum(fisrtArgument, secondArgument);
         expect(result).toEqual(fisrtArgument + secondArgument + 1)
     })
 })

 --------------------------------------------------------- 

 import UserController from "./UserController";

describe('Create user', () => {

    it('Deve ser possivel criar um usuario', async () => {
        const userData = {
            name: 'Teste',
            email: 'teste@gmail.com',
            password: '123456'
        };

        const user = await UserController.create.execute(userData);
        console.log(user)

        expect(user).toHaveProperty('id');
    });
});